//codigo usuario
package analizador;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import inicio.VentanaInicio;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import arbol.Nodo;
import java.util.ArrayList;
import javax.swing.tree.MutableTreeNode;

//Codigo para el parser, variables, metodos
parser code
{:
    /*
    public VentanaInicio ventana;
    public void setVentana(VentanaInicio ventana){
    this.ventana = ventana;
    
    }

    public static LinkedList<Error> tablaErrorLexico = new LinkedList<Error>();
    
    public void syntaxError(Symbol s){
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("====== Error Sinstactico =====");
    System.out.println("Lexema: "+lexema);
    System.out.println("Fila: "+fila);
    System.out.println("Columna: "+columna);

    } */

    private Symbol s;
    public void syntaError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }


:}

//Coidgo para las acciones gramaticales

action code
{:
    DefaultMutableTreeNode root;
    ArrayList<DefaultMutableTreeNode> listaNodos;
    public DefaultMutableTreeNode getArbol(){
        return this.root;
    }

    

    
:}

//Declaraciones 
terminal PROYECTO, NOMBRE,ARCHIVO,CARPETA,UBICACION, MENOR,MAYOR,COMILLAS,DIAGONAL,IGUAL,NUMERO,CARACTERES,PALABRA,RUTA,CSV,PUNTO;

// declaracion no terminales
non terminal INICIO, TIPO_ENTRADA,TIPO_ARCHIVO,TIPO_CARPETA,TIPO_CERRAR,PATHS,TIPO_PROYECTO,SEGUIDO;

//presedencia de menor a mayor
//precedence left NOMBRE, PALABRA;


start with INICIO;

//Reglas Semanticas

INICIO::= MENOR PROYECTO TIPO_PROYECTO;

SEGUIDO::= MENOR TIPO_ENTRADA;

TIPO_ENTRADA::= ARCHIVO TIPO_ARCHIVO
               |CARPETA TIPO_CARPETA
               |DIAGONAL TIPO_CERRAR;

TIPO_PROYECTO::= NOMBRE IGUAL COMILLAS PALABRA:a {: System.out.println("palabra proyecto: "+a);:} COMILLAS MAYOR 
{:
    Nodo raiz = new Nodo("",(String) a);
    root = new DefaultMutableTreeNode();
    listaNodos = new ArrayList<>();
    listaNodos.add(root);
    System.out.println("Tamanio "+listaNodos.size());
:}
SEGUIDO;

TIPO_ARCHIVO::= NOMBRE IGUAL COMILLAS PALABRA:a {: System.out.println("palabra archivo: "+a); :} COMILLAS UBICACION IGUAL COMILLAS RUTA:b CSV:v {:System.out.println("ruta DE ARCHIVO: "+b+v); :} COMILLAS DIAGONAL MAYOR 
{:
System.out.println("Tamanio "+listaNodos.size());
    Nodo nodo = new Nodo((String) b+v,(String) a);
    DefaultMutableTreeNode nodoArchivo = listaNodos.get(listaNodos.size()-1);
    listaNodos.remove(listaNodos.size()-1);
    nodoArchivo.setUserObject( nodo);
    listaNodos.add(nodoArchivo);

:}
SEGUIDO;

TIPO_CARPETA::= NOMBRE IGUAL COMILLAS PALABRA:a {: System.out.println("palabra carpeta: "+a); :} COMILLAS MAYOR 
{:
System.out.println("Tamanio "+listaNodos.size());
    Nodo nodo = new Nodo("",(String) a);
    //DefaultMutableTreeNode nodoCarpeta = listaNodos.get(listaNodos.size()-1);
    DefaultMutableTreeNode nodoCarpeta = new DefaultMutableTreeNode();
    //listaNodos.remove(listaNodos.size()-1);
    nodoCarpeta.setUserObject( nodo);
    listaNodos.add(nodoCarpeta);
    
:}
SEGUIDO;

TIPO_CERRAR::= PROYECTO MAYOR
{:   
    System.out.println("Tamanio antes final "+listaNodos.size());
    DefaultMutableTreeNode arbolFinal = listaNodos.get(0);
    listaNodos.remove(listaNodos.size()-1);
    root = arbolFinal;
    System.out.println("Tamanio final "+listaNodos.size());
    RESULT = root; 

:}
              |CARPETA MAYOR 
{:
    System.out.println("Tamanio1 "+listaNodos.size());
    DefaultMutableTreeNode nodoUltimo = listaNodos.get(listaNodos.size()-1);
    listaNodos.remove(listaNodos.size()-1);
    System.out.println("Tamanio2 "+listaNodos.size());
    DefaultMutableTreeNode nodoPenultimo = listaNodos.get(listaNodos.size()-1);
    listaNodos.remove(listaNodos.size()-1);
    System.out.println("Tamanio3 "+listaNodos.size());
    nodoPenultimo.add(nodoUltimo);
    listaNodos.add(nodoPenultimo);

:}
SEGUIDO;
