//codigo usuario
package analizador;
import archivos.Tabla;
import archivos.Tupla;
import java_cup.runtime.Symbol;
import java.util.LinkedList;

//Codigo para el parser, variables, metodos
parser code
{:
    
    private Tabla tabla;


    public Tabla getTabla(){
        return tabla;
    }
    public void setTabla(Tabla tabla){
        this.tabla = tabla;
    }
    /*public static LinkedList<Error> tablaErrorLexico = new LinkedList<Error>();
    
    public void syntaxError(Symbol s){
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("====== Error Sinstactico =====");
    System.out.println("Lexema: "+lexema);
    System.out.println("Fila: "+fila);
    System.out.println("Columna: "+columna);

    } */

    private Symbol s;
    public void syntaError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }


:}

//Coidgo para las acciones gramaticales

action code
{:
    
    Tabla tabla = new Tabla();
    Tupla tupla;

:}

//Declaraciones 
terminal TEXTO, COMA,LINEA;

// declaracion no terminales
non terminal INICIO,E;

//presedencia de menor a mayor
//precedence left NOMBRE, PALABRA;


start with INICIO;

//Reglas Semanticas

INICIO::= TEXTO:a {:
tupla = new Tupla();
tupla.agregarContenido((String)a);:} E
          |TEXTO:a {:
tupla = new Tupla();
tupla.agregarContenido((String)a);:};
          
E ::= COMA TEXTO:a {:tupla.agregarContenido((String)a);:} 
      |COMA TEXTO:a {:tupla.agregarContenido((String)a);:} E
      |LINEA {:
      tabla.agregarTupla(tupla);
      parser.setTabla(tabla);
      //tupla.limpiarTupla();
:} 
INICIO
      |LINEA {:
      tabla.agregarTupla(tupla);
      
      parser.setTabla(tabla);
      //tupla.limpiarTupla();
:};
