
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 20 15:20:39 CST 2020
//----------------------------------------------------

package analizador;

import arbol.Busqueda;
import arbol.Nodo;
import archivos.Archivo;
import archivos.Eliminar;
import archivos.Tabla;
import java.io.StringReader;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 20 15:20:39 CST 2020
  */
public class AnalizadorSintactico2 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico2() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\020\002" +
    "\000\002\003\012\000\002\003\011\000\002\021\002\000" +
    "\002\022\002\000\002\003\011\000\002\003\007\000\002" +
    "\017\003\000\002\017\005\000\002\007\007\000\002\007" +
    "\007\000\002\007\005\000\002\010\007\000\002\010\005" +
    "\000\002\011\007\000\002\011\005\000\002\023\002\000" +
    "\002\004\015\000\002\015\003\000\002\015\005\000\002" +
    "\014\003\000\002\014\005\000\002\005\007\000\002\005" +
    "\012\000\002\013\011\000\002\013\007\000\002\024\002" +
    "\000\002\025\002\000\002\006\007\000\002\006\007\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\016" +
    "\003\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\012\006\005\010\004\011\010\013\006\001" +
    "\002\000\004\015\134\001\002\000\006\004\100\025\101" +
    "\001\002\000\004\015\065\001\002\000\004\002\064\001" +
    "\002\000\004\015\011\001\002\000\004\020\012\001\002" +
    "\000\004\012\014\001\002\000\004\002\ufffe\001\002\000" +
    "\004\004\015\001\002\000\004\023\056\001\002\000\006" +
    "\007\020\021\017\001\002\000\014\002\uffd7\006\005\010" +
    "\004\011\010\013\006\001\002\000\004\004\021\001\002" +
    "\000\016\023\027\030\032\031\034\032\033\033\035\034" +
    "\030\001\002\000\004\021\023\001\002\000\004\021\024" +
    "\001\002\000\014\002\uffd7\006\005\010\004\011\010\013" +
    "\006\001\002\000\004\002\uffe5\001\002\000\004\002\uffd8" +
    "\001\002\000\004\004\uffde\001\002\000\004\004\uffd9\001" +
    "\002\000\004\004\036\001\002\000\004\004\uffdd\001\002" +
    "\000\004\004\uffdb\001\002\000\004\004\uffdc\001\002\000" +
    "\004\004\uffda\001\002\000\010\016\037\017\040\021\ufff1" +
    "\001\002\000\004\004\047\001\002\000\004\004\041\001" +
    "\002\000\016\023\027\030\032\031\034\032\033\033\035" +
    "\034\030\001\002\000\004\021\ufff2\001\002\000\004\004" +
    "\044\001\002\000\006\017\045\021\uffed\001\002\000\004" +
    "\004\041\001\002\000\004\021\uffee\001\002\000\016\023" +
    "\027\030\032\031\034\032\033\033\035\034\030\001\002" +
    "\000\004\021\ufff3\001\002\000\004\004\052\001\002\000" +
    "\006\016\053\021\uffef\001\002\000\004\004\047\001\002" +
    "\000\004\021\ufff0\001\002\000\004\002\uffe6\001\002\000" +
    "\004\024\057\001\002\000\004\004\060\001\002\000\004" +
    "\024\061\001\002\000\010\005\062\007\uffe3\021\uffe3\001" +
    "\002\000\004\004\015\001\002\000\006\007\uffe4\021\uffe4" +
    "\001\002\000\004\002\001\001\002\000\004\020\066\001" +
    "\002\000\006\007\070\021\uffe2\001\002\000\004\002\ufffd" +
    "\001\002\000\004\004\021\001\002\000\004\021\072\001" +
    "\002\000\014\002\uffe1\006\uffe1\010\uffe1\011\uffe1\013\uffe1" +
    "\001\002\000\014\002\uffd7\006\005\010\004\011\010\013" +
    "\006\001\002\000\004\002\uffe0\001\002\000\004\021\076" +
    "\001\002\000\014\002\uffd7\006\005\010\004\011\010\013" +
    "\006\001\002\000\004\002\uffdf\001\002\000\006\005\127" +
    "\015\ufff5\001\002\000\004\015\114\001\002\000\004\015" +
    "\104\001\002\000\004\002\000\001\002\000\004\020\105" +
    "\001\002\000\006\007\107\021\106\001\002\000\014\002" +
    "\uffd7\006\005\010\004\011\010\013\006\001\002\000\004" +
    "\004\021\001\002\000\004\021\111\001\002\000\014\002" +
    "\uffd7\006\005\010\004\011\010\013\006\001\002\000\004" +
    "\002\ufffa\001\002\000\004\002\ufff6\001\002\000\004\020" +
    "\115\001\002\000\006\007\ufffc\021\ufff9\001\002\000\004" +
    "\021\124\001\002\000\004\007\120\001\002\000\004\004" +
    "\021\001\002\000\004\021\122\001\002\000\014\002\uffd7" +
    "\006\005\010\004\011\010\013\006\001\002\000\004\002" +
    "\ufffb\001\002\000\014\002\ufff8\006\ufff8\010\ufff8\011\ufff8" +
    "\013\ufff8\001\002\000\014\002\uffd7\006\005\010\004\011" +
    "\010\013\006\001\002\000\004\002\ufff7\001\002\000\004" +
    "\004\130\001\002\000\010\005\132\015\uffea\027\uffea\001" +
    "\002\000\004\015\ufff4\001\002\000\004\004\130\001\002" +
    "\000\006\015\uffe9\027\uffe9\001\002\000\004\020\136\001" +
    "\002\000\004\002\uffff\001\002\000\004\026\uffec\001\002" +
    "\000\004\026\140\001\002\000\004\004\130\001\002\000" +
    "\004\027\142\001\002\000\004\014\143\001\002\000\004" +
    "\026\144\001\002\000\004\004\145\001\002\000\006\005" +
    "\152\027\uffe8\001\002\000\004\027\147\001\002\000\004" +
    "\021\150\001\002\000\014\002\uffd7\006\005\010\004\011" +
    "\010\013\006\001\002\000\004\002\uffeb\001\002\000\004" +
    "\004\145\001\002\000\004\027\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\002\006\001\001\000\002\001\001\000" +
    "\006\003\102\017\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\025\016" +
    "\054\001\001\000\004\007\021\001\001\000\004\012\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\025\016\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\047\001\001\000" +
    "\004\011\041\001\001\000\004\012\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\045\001\001\000\002\001\001\000\004\012\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\066\001\001\000\004\024" +
    "\070\001\001\000\002\001\001\000\004\007\074\001\001" +
    "\000\002\001\001\000\004\025\072\001\001\000\006\002" +
    "\025\016\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\025\016\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\025\016\112\001\001\000\004\007\107\001\001\000\002" +
    "\001\001\000\006\002\025\016\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\116" +
    "\021\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\120\001\001\000\002\001\001\000\006\002\025" +
    "\016\122\001\001\000\002\001\001\000\004\022\124\001" +
    "\001\000\006\002\025\016\125\001\001\000\002\001\001" +
    "\000\004\015\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\132\001\001\000\002\001\001\000\004" +
    "\004\134\001\001\000\002\001\001\000\004\023\136\001" +
    "\001\000\002\001\001\000\004\015\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\025\016\150\001\001\000\002\001" +
    "\001\000\004\014\152\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    TreeNode nodoFin;
    ArrayList<Tabla> listaTablas;

    public void setLista(ArrayList<Tabla> listaTablas){
        System.out.println("Tmanio lisata: "+listaTablas.size());
        this.listaTablas = listaTablas;
    }
    public ArrayList<Tabla> getLista(){
        return listaTablas;
    }

    /*public static LinkedList<Error> tablaErrorLexico = new LinkedList<Error>();
    
    public void syntaxError(Symbol s){
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("====== Error Sinstactico =====");
    System.out.println("Lexema: "+lexema);
    System.out.println("Fila: "+fila);
    System.out.println("Columna: "+columna);

    } */
    
    public void setArbol(TreeNode nodoFIN){
        this.nodoFin=nodoFIN;   
    }
    public TreeNode getArbol(){
        return nodoFin;
    }

    private Symbol s;
    public void syntaError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico2$actions {


    ArrayList<DefaultMutableTreeNode> listaNodos;
    TreeNode nodoBuscado;
    Busqueda busqueda = new Busqueda();
    Archivo archivo = new Archivo();
    ArrayList<Tabla> listaTablas = new ArrayList<>();
    Eliminar eliminar = new Eliminar();

    public void verNombre(String path){
        String te = path;
        String signo = Pattern.quote(".");
        String [] nombres = te.split(signo);
        DefaultMutableTreeNode nodoP = (DefaultMutableTreeNode) parser.getArbol();
        Nodo nodoOb =(Nodo) nodoP.getUserObject();
        if(nodoOb.getNombre().equals(nombres[0])){
            buscar(nombres);
        }else{
            System.out.println("No se parece");
        }
        

    }
    public void buscar(String [] paths){
        TreeNode nod =(TreeNode) parser.getArbol();
        for(int i =1;i<paths.length;i++){
            busqueda.insertarNodo(nod,paths[i]);
            nod = busqueda.getNodoPadre();
        }
        parser.setArbol(nod);
        if(parser.getArbol()!=null){
            System.out.println("Si encontro"+nod.toString());
        }else{
            System.out.println("No encontro");
        }
    }

    private void analizarCsv(){
        DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
        Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
        AnalizadorLexico3 lexico = new AnalizadorLexico3(new StringReader(archivo.leerCSV(nodoS.getPath())));
        AnalizadorSintactico3 sintactico = new AnalizadorSintactico3(lexico);
        try {
            sintactico.parse();
            listaTablas.add(sintactico.getTabla());
            //System.out.println("Tamanio final: "+parser.getLista().size());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    
    }

  private final AnalizadorSintactico2 parser;

  /** Constructor */
  CUP$AnalizadorSintactico2$actions(AnalizadorSintactico2 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico2$do_action(
    int                        CUP$AnalizadorSintactico2$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico2$parser,
    java.util.Stack            CUP$AnalizadorSintactico2$stack,
    int                        CUP$AnalizadorSintactico2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico2$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FINALIZA ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FINALIZA",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FINALIZA ::= INICIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FINALIZA",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADORES ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADORES ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERADORES ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERADORES ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERADORES ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERADORES ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_ELIMINAR ::= PATH_ARCHIVO FILTRAR TIPO_FILTROS PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ELIMINAR",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_ELIMINAR ::= PATH_ARCHIVO NT$4 PUNTO_COMA NT$5 FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ELIMINAR",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).value;

            if(parser.getArbol()!=null){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    eliminar.leerCSV(nodoS.getPath());
                }else{
                    System.out.println("No existe el archivo");
                }
            



              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;


            verNombre((String)a);
            


              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNAR_COLUMNA ::= TEXTO IGUAL COMILLAS TEXTO COMILLAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("ASIGNAR_COLUMNA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNAR_COLUMNA ::= TEXTO IGUAL COMILLAS TEXTO COMILLAS COMA ASIGNAR_COLUMNA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("ASIGNAR_COLUMNA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_ACTUALIZAR ::= PATH_ARCHIVO ASIGNAR ASIGNAR_COLUMNA FILTRAR TIPO_FILTROS PUNTO_COMA PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ACTUALIZAR",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_ACTUALIZAR ::= PATH_ARCHIVO ASIGNAR ASIGNAR_COLUMNA PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ACTUALIZAR",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_VALORES_INSERTAR ::= TEXTO COMA LISTA_VALORES_INSERTAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_INSERTAR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_VALORES_INSERTAR ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_INSERTAR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_COLUMNAS_INSERTAR ::= TEXTO COMA LISTA_COLUMNAS_INSERTAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNAS_INSERTAR",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_COLUMNAS_INSERTAR ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNAS_INSERTAR",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_INSERTAR ::= PATH_ARCHIVO NT$3 PARENTECIS_A LISTA_COLUMNAS_INSERTAR PARENTECIS_C VALORES PARENTECIS_A LISTA_VALORES_INSERTAR PARENTECIS_C PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-10)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_INSERTAR",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;


    verNombre((String)a);




              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FILTRO_OR ::= TEXTO OPERADORES TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_OR",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FILTRO_OR ::= TEXTO OPERADORES TEXTO OR FILTRO_OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_OR",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FILTRO_AND ::= TEXTO OPERADORES TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_AND",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FILTRO_AND ::= TEXTO OPERADORES TEXTO AND FILTRO_AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_AND",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_FILTROS ::= TEXTO OPERADORES TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_FILTROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_FILTROS ::= TEXTO OPERADORES TEXTO OR FILTRO_OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_FILTROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_FILTROS ::= TEXTO OPERADORES TEXTO AND FILTRO_AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_FILTROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_COLUMNAS_SELECT ::= TEXTO COMA LISTA_COLUMNAS_INSERTAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNAS_SELECT",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_COLUMNAS_SELECT ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNAS_SELECT",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_SELECCIONAR ::= LISTA_COLUMNAS_SELECT EN PATH_ARCHIVO PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_SELECCIONAR",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_SELECCIONAR ::= ASTERISCO EN PATH_ARCHIVO NT$1 PUNTO_COMA NT$2 FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_SELECCIONAR",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).value;

                parser.setLista(listaTablas);

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;

    
                verNombre((String)a);
                if(parser.getArbol()!=null){
                    analizarCsv();
                }else{
                    System.out.println("No existe el archivo");
                }


              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO_SELECCIONAR ::= LISTA_COLUMNAS_SELECT EN PATH_ARCHIVO FILTRAR TIPO_FILTROS PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_SELECCIONAR",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO_SELECCIONAR ::= ASTERISCO EN PATH_ARCHIVO NT$0 FILTRAR TIPO_FILTROS PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_SELECCIONAR",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;

    
        verNombre((String)a);


              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ELIMINAR EN TIPO_ELIMINAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= ACTUALIZAR EN TIPO_ACTUALIZAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INSERTAR EN TIPO_INSERTAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SELECCIONAR TIPO_SELECCIONAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico2$parser.done_parsing();
          return CUP$AnalizadorSintactico2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

