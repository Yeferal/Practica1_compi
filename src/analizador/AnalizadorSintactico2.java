
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 18 01:44:08 CST 2020
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 18 01:44:08 CST 2020
  */
public class AnalizadorSintactico2 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico2() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\003\002" +
    "\000\002\007\007\000\002\007\007\000\002\007\005\000" +
    "\002\010\007\000\002\010\005\000\002\011\007\000\002" +
    "\011\005\000\002\004\013\000\002\015\003\000\002\015" +
    "\005\000\002\014\003\000\002\014\005\000\002\005\006" +
    "\000\002\005\010\000\002\013\011\000\002\013\007\000" +
    "\002\006\004\000\002\006\006\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\016\004\000\002\016\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\012\006\005\010\004\011\010\013\006\001" +
    "\002\000\004\015\073\001\002\000\004\002\ufffc\001\002" +
    "\000\004\015\063\001\002\000\004\002\062\001\002\000" +
    "\004\015\011\001\002\000\004\020\012\001\002\000\004" +
    "\012\014\001\002\000\004\002\ufffe\001\002\000\004\004" +
    "\015\001\002\000\004\023\054\001\002\000\006\007\020" +
    "\021\021\001\002\000\004\002\uffef\001\002\000\004\004" +
    "\023\001\002\000\014\002\uffe2\006\005\010\004\011\010" +
    "\013\006\001\002\000\004\002\uffe3\001\002\000\016\023" +
    "\026\030\031\031\032\032\033\033\034\034\027\001\002" +
    "\000\004\021\021\001\002\000\004\002\uffee\001\002\000" +
    "\004\004\uffe9\001\002\000\004\004\uffe4\001\002\000\004" +
    "\004\035\001\002\000\004\004\uffe8\001\002\000\004\004" +
    "\uffe7\001\002\000\004\004\uffe6\001\002\000\004\004\uffe5" +
    "\001\002\000\010\016\036\017\037\021\ufff9\001\002\000" +
    "\004\004\046\001\002\000\004\004\040\001\002\000\016" +
    "\023\026\030\031\031\032\032\033\033\034\034\027\001" +
    "\002\000\004\021\ufffa\001\002\000\004\004\043\001\002" +
    "\000\006\017\044\021\ufff5\001\002\000\004\004\040\001" +
    "\002\000\004\021\ufff6\001\002\000\016\023\026\030\031" +
    "\031\032\032\033\033\034\034\027\001\002\000\004\021" +
    "\ufffb\001\002\000\004\004\051\001\002\000\006\016\052" +
    "\021\ufff7\001\002\000\004\004\046\001\002\000\004\021" +
    "\ufff8\001\002\000\004\024\055\001\002\000\004\004\056" +
    "\001\002\000\004\024\057\001\002\000\010\005\060\007" +
    "\uffec\021\uffec\001\002\000\004\004\015\001\002\000\006" +
    "\007\uffed\021\uffed\001\002\000\004\002\001\001\002\000" +
    "\004\020\064\001\002\000\006\007\067\021\021\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\uffeb\001\002\000" +
    "\004\004\023\001\002\000\004\021\021\001\002\000\004" +
    "\002\uffea\001\002\000\004\002\000\001\002\000\004\020" +
    "\075\001\002\000\004\002\uffff\001\002\000\004\026\076" +
    "\001\002\000\004\004\077\001\002\000\006\005\112\027" +
    "\ufff3\001\002\000\004\027\101\001\002\000\004\014\102" +
    "\001\002\000\004\026\103\001\002\000\004\004\104\001" +
    "\002\000\006\005\110\027\ufff1\001\002\000\004\027\106" +
    "\001\002\000\004\021\021\001\002\000\004\002\ufff4\001" +
    "\002\000\004\004\104\001\002\000\004\027\ufff0\001\002" +
    "\000\004\004\077\001\002\000\004\027\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\004\002\006\001\001\000\002\001\001\000" +
    "\004\003\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\015\001\001\000\002" +
    "\001\001\000\004\016\016\001\001\000\002\001\001\000" +
    "\004\007\023\001\001\000\004\002\021\001\001\000\002" +
    "\001\001\000\004\012\027\001\001\000\004\016\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\046\001\001\000\004\011\040\001\001\000\004\012" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\044\001\001\000\002\001\001\000" +
    "\004\012\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\064\001\001\000\004" +
    "\016\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\067\001\001\000\004\016\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\106\001\001\000\002\001" +
    "\001\000\004\014\110\001\001\000\002\001\001\000\004" +
    "\015\112\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*public static LinkedList<Error> tablaErrorLexico = new LinkedList<Error>();
    
    public void syntaxError(Symbol s){
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("====== Error Sinstactico =====");
    System.out.println("Lexema: "+lexema);
    System.out.println("Fila: "+fila);
    System.out.println("Columna: "+columna);

    } */

    private Symbol s;
    public void syntaError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico2$actions {



  private final AnalizadorSintactico2 parser;

  /** Constructor */
  CUP$AnalizadorSintactico2$actions(AnalizadorSintactico2 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico2$do_action(
    int                        CUP$AnalizadorSintactico2$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico2$parser,
    java.util.Stack            CUP$AnalizadorSintactico2$stack,
    int                        CUP$AnalizadorSintactico2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico2$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FINALIZA ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FINALIZA",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FINALIZA ::= PUNTO_COMA INICIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FINALIZA",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERADORES ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERADORES ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERADORES ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERADORES ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERADORES ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERADORES ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_ELIMINAR ::= PATH_ARCHIVO FILTRAR TIPO_FILTROS FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ELIMINAR",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_ELIMINAR ::= PATH_ARCHIVO FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ELIMINAR",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNAR_COLUMNA ::= TEXTO IGUAL COMILLAS TEXTO COMILLAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("ASIGNAR_COLUMNA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNAR_COLUMNA ::= TEXTO IGUAL COMILLAS TEXTO COMILLAS COMA ASIGNAR_COLUMNA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("ASIGNAR_COLUMNA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_ACTUALIZAR ::= PATH_ARCHIVO ASIGNAR ASIGNAR_COLUMNA FILTRAR TIPO_FILTROS FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ACTUALIZAR",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_ACTUALIZAR ::= PATH_ARCHIVO ASIGNAR ASIGNAR_COLUMNA FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ACTUALIZAR",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_VALORES_INSERTAR ::= TEXTO COMA LISTA_VALORES_INSERTAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_INSERTAR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_VALORES_INSERTAR ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_INSERTAR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_COLUMNAS_INSERTAR ::= TEXTO COMA LISTA_COLUMNAS_INSERTAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNAS_INSERTAR",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_COLUMNAS_INSERTAR ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNAS_INSERTAR",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_INSERTAR ::= PATH_ARCHIVO PARENTECIS_A LISTA_COLUMNAS_INSERTAR PARENTECIS_C VALORES PARENTECIS_A LISTA_VALORES_INSERTAR PARENTECIS_C FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_INSERTAR",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FILTRO_OR ::= TEXTO OPERADORES TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_OR",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FILTRO_OR ::= TEXTO OPERADORES TEXTO OR FILTRO_OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_OR",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FILTRO_AND ::= TEXTO OPERADORES TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_AND",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FILTRO_AND ::= TEXTO OPERADORES TEXTO AND FILTRO_AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_AND",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO_FILTROS ::= TEXTO OPERADORES TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_FILTROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO_FILTROS ::= TEXTO OPERADORES TEXTO OR FILTRO_OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_FILTROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO_FILTROS ::= TEXTO OPERADORES TEXTO AND FILTRO_AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_FILTROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPO_SELECCIONAR ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_SELECCIONAR",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ELIMINAR EN TIPO_ELIMINAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= ACTUALIZAR EN TIPO_ACTUALIZAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INSERTAR EN TIPO_INSERTAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SELECCIONAR TIPO_SELECCIONAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico2$parser.done_parsing();
          return CUP$AnalizadorSintactico2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

