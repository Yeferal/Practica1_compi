
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 21 04:18:29 CST 2020
//----------------------------------------------------

package analizador;

import arbol.Busqueda;
import arbol.Nodo;
import archivos.Archivo;
import archivos.Eliminar;
import archivos.Insercion;
import archivos.Actualizar;
import archivos.SeleccionColumna;
import archivos.Tabla;
import java.io.StringReader;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 21 04:18:29 CST 2020
  */
public class AnalizadorSintactico2 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico2() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\004\000\002\020" +
    "\002\000\002\002\007\000\002\021\002\000\002\002\011" +
    "\000\002\002\005\000\002\022\002\000\002\003\012\000" +
    "\002\023\002\000\002\024\002\000\002\003\011\000\002" +
    "\025\002\000\002\003\012\000\002\026\002\000\002\027" +
    "\002\000\002\003\011\000\002\030\002\000\002\017\006" +
    "\000\002\017\003\000\002\007\007\000\002\007\007\000" +
    "\002\007\005\000\002\010\007\000\002\010\005\000\002" +
    "\011\007\000\002\011\005\000\002\031\002\000\002\004" +
    "\014\000\002\032\002\000\002\004\011\000\002\015\003" +
    "\000\002\033\002\000\002\015\006\000\002\014\003\000" +
    "\002\034\002\000\002\014\006\000\002\035\002\000\002" +
    "\005\005\000\002\005\007\000\002\036\002\000\002\013" +
    "\012\000\002\013\007\000\002\037\002\000\002\013\010" +
    "\000\002\013\005\000\002\040\002\000\002\041\002\000" +
    "\002\006\007\000\002\006\007\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\016\003\000\002\016\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\012\006\005\010\004\011\010\013\006\001" +
    "\002\000\004\015\144\001\002\000\006\004\107\025\110" +
    "\001\002\000\004\015\074\001\002\000\004\002\073\001" +
    "\002\000\004\015\011\001\002\000\004\020\012\001\002" +
    "\000\004\012\ufffd\001\002\000\004\012\014\001\002\000" +
    "\004\004\015\001\002\000\004\023\060\001\002\000\006" +
    "\007\017\021\020\001\002\000\004\004\025\001\002\000" +
    "\014\002\uffdc\006\uffdc\010\uffdc\011\uffdc\013\uffdc\001\002" +
    "\000\004\002\ufffc\001\002\000\014\002\uffc8\006\005\010" +
    "\004\011\010\013\006\001\002\000\004\002\uffdb\001\002" +
    "\000\004\002\uffc9\001\002\000\016\023\032\030\035\031" +
    "\036\032\037\033\040\034\033\001\002\000\004\021\027" +
    "\001\002\000\004\021\030\001\002\000\014\002\uffc8\006" +
    "\005\010\004\011\010\013\006\001\002\000\004\002\uffda" +
    "\001\002\000\004\004\uffcf\001\002\000\004\004\uffca\001" +
    "\002\000\004\004\041\001\002\000\004\004\uffce\001\002" +
    "\000\004\004\uffcd\001\002\000\004\004\uffcc\001\002\000" +
    "\004\004\uffcb\001\002\000\010\016\042\017\043\021\uffeb" +
    "\001\002\000\004\004\052\001\002\000\004\004\044\001" +
    "\002\000\016\023\032\030\035\031\036\032\037\033\040" +
    "\034\033\001\002\000\004\021\uffec\001\002\000\004\004" +
    "\047\001\002\000\006\017\050\021\uffe7\001\002\000\004" +
    "\004\044\001\002\000\004\021\uffe8\001\002\000\016\023" +
    "\032\030\035\031\036\032\037\033\040\034\033\001\002" +
    "\000\004\021\uffed\001\002\000\004\004\055\001\002\000" +
    "\006\016\056\021\uffe9\001\002\000\004\004\052\001\002" +
    "\000\004\021\uffea\001\002\000\006\004\061\024\062\001" +
    "\002\000\010\005\070\007\uffd4\021\uffd4\001\002\000\004" +
    "\004\063\001\002\000\004\024\064\001\002\000\010\005" +
    "\uffd9\007\uffd7\021\uffd7\001\002\000\004\005\066\001\002" +
    "\000\004\004\015\001\002\000\006\007\uffd8\021\uffd8\001" +
    "\002\000\004\004\uffd6\001\002\000\004\004\015\001\002" +
    "\000\006\007\uffd5\021\uffd5\001\002\000\004\002\001\001" +
    "\002\000\004\020\075\001\002\000\006\007\077\021\uffd3" +
    "\001\002\000\004\002\ufffb\001\002\000\004\004\025\001" +
    "\002\000\004\021\101\001\002\000\014\002\uffd2\006\uffd2" +
    "\010\uffd2\011\uffd2\013\uffd2\001\002\000\014\002\uffc8\006" +
    "\005\010\004\011\010\013\006\001\002\000\004\002\uffd1" +
    "\001\002\000\004\021\105\001\002\000\014\002\uffc8\006" +
    "\005\010\004\011\010\013\006\001\002\000\004\002\uffd0" +
    "\001\002\000\006\005\141\015\uffee\001\002\000\004\015" +
    "\126\001\002\000\004\015\113\001\002\000\004\002\000" +
    "\001\002\000\004\020\114\001\002\000\006\007\ufff5\021" +
    "\ufff3\001\002\000\004\021\123\001\002\000\004\007\117" +
    "\001\002\000\004\004\025\001\002\000\004\021\121\001" +
    "\002\000\014\002\uffc8\006\005\010\004\011\010\013\006" +
    "\001\002\000\004\002\ufff4\001\002\000\014\002\ufff2\006" +
    "\ufff2\010\ufff2\011\ufff2\013\ufff2\001\002\000\014\002\uffc8" +
    "\006\005\010\004\011\010\013\006\001\002\000\004\002" +
    "\ufff1\001\002\000\004\020\127\001\002\000\006\007\ufffa" +
    "\021\ufff8\001\002\000\004\021\136\001\002\000\004\007" +
    "\132\001\002\000\004\004\025\001\002\000\004\021\134" +
    "\001\002\000\014\002\uffc8\006\005\010\004\011\010\013" +
    "\006\001\002\000\004\002\ufff9\001\002\000\014\002\ufff7" +
    "\006\ufff7\010\ufff7\011\ufff7\013\ufff7\001\002\000\014\002" +
    "\uffc8\006\005\010\004\011\010\013\006\001\002\000\004" +
    "\002\ufff6\001\002\000\004\004\ufff0\001\002\000\004\004" +
    "\107\001\002\000\004\015\uffef\001\002\000\004\020\145" +
    "\001\002\000\006\014\uffff\026\uffff\001\002\000\006\014" +
    "\150\026\151\001\002\000\004\002\ufffe\001\002\000\004" +
    "\026\173\001\002\000\004\004\152\001\002\000\006\005" +
    "\uffe1\027\uffe2\001\002\000\004\027\154\001\002\000\004" +
    "\014\155\001\002\000\004\026\156\001\002\000\004\004" +
    "\157\001\002\000\006\005\uffde\027\uffdf\001\002\000\004" +
    "\027\161\001\002\000\004\021\162\001\002\000\014\002" +
    "\uffe6\006\uffe6\010\uffe6\011\uffe6\013\uffe6\001\002\000\014" +
    "\002\uffc8\006\005\010\004\011\010\013\006\001\002\000" +
    "\004\002\uffe5\001\002\000\004\005\166\001\002\000\004" +
    "\004\157\001\002\000\004\027\uffdd\001\002\000\004\005" +
    "\171\001\002\000\004\004\152\001\002\000\004\027\uffe0" +
    "\001\002\000\004\004\157\001\002\000\004\027\175\001" +
    "\002\000\004\021\176\001\002\000\014\002\uffe4\006\uffe4" +
    "\010\uffe4\011\uffe4\013\uffe4\001\002\000\014\002\uffc8\006" +
    "\005\010\004\011\010\013\006\001\002\000\004\002\uffe3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\002\006\001\001\000\002\001\001\000" +
    "\006\003\111\017\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\012\001\001\000\002\001\001\000\004\013\015\001\001" +
    "\000\002\001\001\000\004\005\020\001\001\000\004\007" +
    "\025\001\001\000\004\035\021\001\001\000\002\001\001" +
    "\000\006\002\023\016\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\023\016\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\052" +
    "\001\001\000\004\011\044\001\001\000\004\012\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\050\001\001\000\002\001\001\000\004\012" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\064\001\001\000\002\001\001\000" +
    "\004\013\066\001\001\000\002\001\001\000\004\037\070" +
    "\001\001\000\004\013\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\075\001\001\000\004\040\077" +
    "\001\001\000\002\001\001\000\004\007\103\001\001\000" +
    "\002\001\001\000\004\041\101\001\001\000\006\002\023" +
    "\016\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\023\016\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\115\026\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\117\001" +
    "\001\000\002\001\001\000\006\002\023\016\121\001\001" +
    "\000\002\001\001\000\004\027\123\001\001\000\006\002" +
    "\023\016\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\130\023\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\132\001\001\000\002\001\001" +
    "\000\006\002\023\016\134\001\001\000\002\001\001\000" +
    "\004\024\136\001\001\000\006\002\023\016\137\001\001" +
    "\000\002\001\001\000\004\030\141\001\001\000\004\017" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\145\001\001\000\004\004\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\152\001\001\000\004" +
    "\033\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\157\001\001\000\004\034\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\162\001\001\000\006\002\023\016\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\171\001\001" +
    "\000\002\001\001\000\004\014\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\176\001\001\000\006" +
    "\002\023\016\177\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    TreeNode nodoFin;
    ArrayList<Tabla> listaTablas;

    public void setLista(ArrayList<Tabla> listaTablas){
        System.out.println("Tmanio lisata: "+listaTablas.size());
        this.listaTablas = listaTablas;
    }
    public ArrayList<Tabla> getLista(){
        return listaTablas;
    }

    /*public static LinkedList<Error> tablaErrorLexico = new LinkedList<Error>();
    
    public void syntaxError(Symbol s){
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("====== Error Sinstactico =====");
    System.out.println("Lexema: "+lexema);
    System.out.println("Fila: "+fila);
    System.out.println("Columna: "+columna);

    } */
    
    public void setArbol(TreeNode nodoFIN){
        this.nodoFin=nodoFIN;   
    }
    public TreeNode getArbol(){
        return nodoFin;
    }

    private Symbol s;
    public void syntaError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico2$actions {


    ArrayList<DefaultMutableTreeNode> listaNodos;
    ArrayList<String> listaColumnasB = new ArrayList<>();
    ArrayList<String> listaColumnasI = new ArrayList<>();
    ArrayList<String> seleccionColumnas = new ArrayList<>();
    TreeNode nodoBuscado;
    Busqueda busqueda = new Busqueda();
    Archivo archivo = new Archivo();
    ArrayList<Tabla> listaTablas = new ArrayList<>();
    Eliminar eliminar = new Eliminar();
    Insercion insercion = new Insercion();
    Actualizar actualizar = new Actualizar();
    SeleccionColumna seleccionColumna = new SeleccionColumna();

    public void verNombre(String path){
        String te = path;
        String signo = Pattern.quote(".");
        String [] nombres = te.split(signo);
        DefaultMutableTreeNode nodoP = (DefaultMutableTreeNode) parser.getArbol();
        Nodo nodoOb =(Nodo) nodoP.getUserObject();
        if(nodoOb.getNombre().equals(nombres[0])){
            buscar(nombres);
        }else{
            System.out.println("No se parece");
        }
        
    }
    public void buscar(String [] paths){
        TreeNode nod =(TreeNode) parser.getArbol();
        for(int i =1;i<paths.length;i++){
            busqueda.insertarNodo(nod,paths[i]);
            nod = busqueda.getNodoPadre();
        }
        parser.setArbol(nod);
        if(parser.getArbol()!=null){
            System.out.println("Si encontro"+nod.toString());
        }else{
            System.out.println("No encontro");
        }
    }

    private void analizarCsv(){
        DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
        Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
        AnalizadorLexico3 lexico = new AnalizadorLexico3(new StringReader(archivo.leerCSV(nodoS.getPath())));
        AnalizadorSintactico3 sintactico = new AnalizadorSintactico3(lexico);
        try {
            sintactico.parse();
            listaTablas.add(sintactico.getTabla());
            //System.out.println("Tamanio final: "+parser.getTabla().size());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    
    }

  private final AnalizadorSintactico2 parser;

  /** Constructor */
  CUP$AnalizadorSintactico2$actions(AnalizadorSintactico2 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico2$do_action(
    int                        CUP$AnalizadorSintactico2$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico2$parser,
    java.util.Stack            CUP$AnalizadorSintactico2$stack,
    int                        CUP$AnalizadorSintactico2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico2$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FINALIZA ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FINALIZA",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FINALIZA ::= INICIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FINALIZA",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADORES ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADORES ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADORES ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADORES ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADORES ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERADORES ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("OPERADORES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_ELIMINAR ::= PATH_ARCHIVO FILTRAR TIPO_FILTROS PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ELIMINAR",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_ELIMINAR ::= PATH_ARCHIVO NT$16 PUNTO_COMA NT$17 FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ELIMINAR",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).value;

            if(parser.getArbol()!=null){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    eliminar.leerCSV(nodoS.getPath());
                    analizarCsv();
                    parser.setLista(listaTablas);
                }else{
                    System.out.println("No existe el archivo");
                }

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$17",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;


            verNombre((String)a);
            


              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$16",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNAR_COLUMNA ::= TEXTO IGUAL TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;
		listaColumnasB.add((String)a); listaColumnasI.add((String)b);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("ASIGNAR_COLUMNA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNAR_COLUMNA ::= TEXTO IGUAL TEXTO COMA NT$15 ASIGNAR_COLUMNA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("ASIGNAR_COLUMNA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$15 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
listaColumnasB.add((String)a); listaColumnasI.add((String)b);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$15",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNAR_COLUMNA ::= TEXTO IGUAL COMILLAS TEXTO COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		listaColumnasB.add((String)a); listaColumnasI.add((String)b);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("ASIGNAR_COLUMNA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNAR_COLUMNA ::= TEXTO IGUAL COMILLAS TEXTO COMILLAS NT$14 COMA ASIGNAR_COLUMNA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("ASIGNAR_COLUMNA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$14 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
listaColumnasB.add((String)a); listaColumnasI.add((String)b);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$14",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_ACTUALIZAR ::= FILTRAR TIPO_FILTROS PUNTO_COMA PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ACTUALIZAR",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_ACTUALIZAR ::= PUNTO_COMA NT$13 FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_ACTUALIZAR",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$13 ::= 
            {
              Object RESULT =null;

                if(parser.getArbol()!=null){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    actualizar.insertarLine(nodoS.getPath(),listaColumnasB,listaColumnasI);
                    analizarCsv();
                    parser.setLista(listaTablas);
                    listaColumnasB.clear();
                    listaColumnasI.clear();
                }else{
                    System.out.println("No existe el archivo");
                }


              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$13",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_VALORES_INSERTAR ::= TEXTO NT$12 COMA LISTA_VALORES_INSERTAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_INSERTAR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$12 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;
listaColumnasI.add((String)a);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$12",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_VALORES_INSERTAR ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;
		listaColumnasI.add((String)a);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_INSERTAR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_COLUMNAS_INSERTAR ::= TEXTO NT$11 COMA LISTA_COLUMNAS_INSERTAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNAS_INSERTAR",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;
listaColumnasB.add((String)a);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$11",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_COLUMNAS_INSERTAR ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;
		listaColumnasB.add((String)a);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNAS_INSERTAR",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_INSERTAR ::= VALORES PARENTECIS_A LISTA_VALORES_INSERTAR PARENTECIS_C PUNTO_COMA NT$10 FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_INSERTAR",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$10 ::= 
            {
              Object RESULT =null;


                if(parser.getArbol()!=null){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    insercion.setListaColumnasT(listaColumnasI);
                    insercion.setLinea(nodoS.getPath());
                    analizarCsv();
                    parser.setLista(listaTablas);
                    listaColumnasB.clear();
                    listaColumnasI.clear();
                }else{
                    System.out.println("No existe el archivo");
                }

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$10",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_INSERTAR ::= PARENTECIS_A LISTA_COLUMNAS_INSERTAR PARENTECIS_C VALORES PARENTECIS_A LISTA_VALORES_INSERTAR PARENTECIS_C PUNTO_COMA NT$9 FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_INSERTAR",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$9 ::= 
            {
              Object RESULT =null;

    
                if(parser.getArbol()!=null){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    insercion.insertarLine(nodoS.getPath(),listaColumnasB,listaColumnasI);
                    analizarCsv();
                    parser.setLista(listaTablas);
                    listaColumnasB.clear();
                    listaColumnasI.clear();
                }else{
                    System.out.println("No existe el archivo");
                }


              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$9",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FILTRO_OR ::= TEXTO OPERADORES TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_OR",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FILTRO_OR ::= TEXTO OPERADORES TEXTO OR FILTRO_OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_OR",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FILTRO_AND ::= TEXTO OPERADORES TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_AND",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FILTRO_AND ::= TEXTO OPERADORES TEXTO AND FILTRO_AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("FILTRO_AND",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_FILTROS ::= TEXTO OPERADORES TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_FILTROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_FILTROS ::= TEXTO OPERADORES TEXTO OR FILTRO_OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_FILTROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_FILTROS ::= TEXTO OPERADORES TEXTO AND FILTRO_AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_FILTROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_COLUMNAS_SELECT ::= TEXTO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;
		seleccionColumnas.add((String)c); System.out.println("Informacion1: "+c);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNAS_SELECT",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_COLUMNAS_SELECT ::= TEXTO COMA NT$8 LISTA_COLUMNAS_SELECT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNAS_SELECT",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
seleccionColumnas.add((String)b); System.out.println("Informacion2: "+b);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$8",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_SELECCIONAR ::= LISTA_COLUMNAS_SELECT EN PATH_ARCHIVO NT$6 PUNTO_COMA NT$7 FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_SELECCIONAR",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).value;


                    if(parser.getArbol()!=null){
                        DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                        Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                        seleccionColumna.listarTabla(nodoS.getPath(),seleccionColumnas);
                        
                        listaTablas.add(seleccionColumna.getTablaTemp());
                        parser.setLista(listaTablas);
                        seleccionColumnas.clear();
                    }else{
                        System.out.println("No existe el archivo");
                    }


              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$7",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;
verNombre((String)a);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$6",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_SELECCIONAR ::= LISTA_COLUMNAS_SELECT EN PATH_ARCHIVO NT$5 FILTRAR TIPO_FILTROS PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_SELECCIONAR",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;
verNombre((String)a);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_SELECCIONAR ::= ASTERISCO EN PATH_ARCHIVO NT$3 PUNTO_COMA NT$4 FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_SELECCIONAR",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).value;

                

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;

    
                verNombre((String)a);
                if(parser.getArbol()!=null){
                    analizarCsv();
                    parser.setLista(listaTablas);
                }else{
                    System.out.println("No existe el archivo");
                }


              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO_SELECCIONAR ::= ASTERISCO EN PATH_ARCHIVO NT$2 FILTRAR TIPO_FILTROS PUNTO_COMA FINALIZA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-5)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("TIPO_SELECCIONAR",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;

    
        verNombre((String)a);


              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= ELIMINAR EN TIPO_ELIMINAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= ACTUALIZAR EN PATH_ARCHIVO NT$1 ASIGNAR ASIGNAR_COLUMNA TIPO_ACTUALIZAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;
verNombre((String)a);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= INSERTAR EN PATH_ARCHIVO NT$0 TIPO_INSERTAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-2)).value;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.peek()).value;
verNombre((String)a);
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SELECCIONAR TIPO_SELECCIONAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.elementAt(CUP$AnalizadorSintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico2$parser.done_parsing();
          return CUP$AnalizadorSintactico2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

