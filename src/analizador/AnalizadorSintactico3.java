
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 21 23:28:35 CST 2020
//----------------------------------------------------

package analizador;

import archivos.Tabla;
import inicio.VentanaInicio;
import java.util.ArrayList;
import archivos.Tupla;
import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 21 23:28:35 CST 2020
  */
public class AnalizadorSintactico3 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico3() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico3(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico3(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\005\002\000\002\002" +
    "\004\000\002\006\002\000\002\004\005\000\002\004\003" +
    "\000\002\007\002\000\002\004\005\000\002\004\004\000" +
    "\002\004\003\000\002\003\004\000\002\010\002\000\002" +
    "\003\006\000\002\011\002\000\002\003\005\000\002\003" +
    "\003\000\002\012\002\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\010\003\000\004\000\007\000\001\002\000" +
    "\010\003\011\004\007\007\010\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\010\003\ufffb\004" +
    "\ufffb\007\ufffb\001\002\000\010\002\ufffc\004\ufffe\005\ufffe" +
    "\001\002\000\012\002\ufff8\003\011\004\007\007\010\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufff9\001\002" +
    "\000\006\004\015\005\017\001\002\000\010\004\ufff1\005" +
    "\ufff1\007\022\001\002\000\004\002\ufffd\001\002\000\012" +
    "\002\ufff2\003\ufff4\004\ufff4\007\ufff4\001\002\000\010\003" +
    "\000\004\000\007\000\001\002\000\004\002\ufff3\001\002" +
    "\000\010\002\ufff7\004\ufff6\005\ufff6\001\002\000\006\004" +
    "\015\005\017\001\002\000\004\002\ufff0\001\002\000\006" +
    "\004\015\005\017\001\002\000\004\002\ufff5\001\002\000" +
    "\010\003\011\004\007\007\010\001\002\000\004\002\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\006\002\004\005\003\001\001\000\004\004" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\026\001\001\000\004\006\013\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\015\001\001\000\004\012\022\001\001\000\002\001" +
    "\001\000\004\011\017\001\001\000\006\002\020\005\003" +
    "\001\001\000\002\001\001\000\004\010\024\001\001\000" +
    "\004\003\023\001\001\000\002\001\001\000\004\003\025" +
    "\001\001\000\002\001\001\000\004\004\027\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico3$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico3$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico3$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private Tabla tabla;
    ArrayList<Error> listaErrores = new ArrayList<>();
    VentanaInicio ventana;
    public void setVentana(VentanaInicio ventana){
        this.ventana=ventana;
    }
    public void setListaErrores(ArrayList<Error> listaErrores){
        this.listaErrores = listaErrores;
    }
    public ArrayList<Error> getListaErrores(){
        return listaErrores;
    }
    public Tabla getTabla(){
        System.out.println("Tam: "+tabla.getTabla().size());
        return tabla;
    }
    public void setTabla(Tabla tabla){
        this.tabla = tabla;
    }
    /*public void syntaxError(Symbol s){
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("====== Error Sinstactico =====");
    System.out.println("Lexema: "+lexema);
    System.out.println("Fila: "+fila);
    System.out.println("Columna: "+columna);

    } */

    public void escribirErrores(Error lista){
            ventana.areaError.setText(ventana.areaError.getText()+lista.toString()+"\n");
        
    }

    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void syntax_error(Symbol s){
            Error e = new Error((String) s.value, "Sintactico", "Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, s.right, s.left);
            listaErrores.add(e);
            escribirErrores(e);
            setAccion("ERROR","Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, "");
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico3$actions {


    
    Tabla tabla = new Tabla();
    Tupla tupla;
    String texto;


  private final AnalizadorSintactico3 parser;

  /** Constructor */
  CUP$AnalizadorSintactico3$actions(AnalizadorSintactico3 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico3$do_action(
    int                        CUP$AnalizadorSintactico3$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico3$parser,
    java.util.Stack            CUP$AnalizadorSintactico3$stack,
    int                        CUP$AnalizadorSintactico3$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico3$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico3$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= COMA NT$5 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).value;

              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              Object RESULT =null;
tupla.agregarContenido("");
              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("NT$5",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= LINEA 
            {
              Object RESULT =null;
		
      tabla.agregarTupla(tupla);
      parser.setTabla(tabla);

              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= LINEA NT$4 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).value;

              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              Object RESULT =null;

      tabla.agregarTupla(tupla);
      parser.setTabla(tabla);

              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("NT$4",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= COMA TEXTO NT$3 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-2)).value;

              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.peek()).value;
 tupla.agregarContenido((String)a);
              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("NT$3",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= COMA TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.peek()).value;
		 tupla.agregarContenido((String)a);
              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // F ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.peek()).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // F ::= error F 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // F ::= COMA NT$2 F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).value;

              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
tupla.agregarContenido("");
              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("NT$2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // F ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.peek()).value;
		 tupla.agregarContenido((String)a);
              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // F ::= TEXTO NT$1 E 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-2)).value;

              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.peek()).value;
 tupla.agregarContenido((String)a);
              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("NT$1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).value;

              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
tupla = new Tupla(); texto=""; 
              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("NT$0",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico3$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.elementAt(CUP$AnalizadorSintactico3$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico3$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico3$parser.done_parsing();
          return CUP$AnalizadorSintactico3$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

