
//codigo usuario
package analizador;
import archivos.Tabla;
import inicio.VentanaInicio;
import java.util.ArrayList;
import archivos.Tupla;
import java_cup.runtime.Symbol;
import java.util.LinkedList;

//Codigo para el parser, variables, metodos
parser code
{:
    
    private Tabla tabla;
    ArrayList<Error> listaErrores = new ArrayList<>();
    VentanaInicio ventana;
    public void setVentana(VentanaInicio ventana){
        this.ventana=ventana;
    }
    public void setListaErrores(ArrayList<Error> listaErrores){
        this.listaErrores = listaErrores;
    }
    public ArrayList<Error> getListaErrores(){
        return listaErrores;
    }
    public Tabla getTabla(){
        System.out.println("Tam: "+tabla.getTabla().size());
        return tabla;
    }
    public void setTabla(Tabla tabla){
        this.tabla = tabla;
    }
    /*public void syntaxError(Symbol s){
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("====== Error Sinstactico =====");
    System.out.println("Lexema: "+lexema);
    System.out.println("Fila: "+fila);
    System.out.println("Columna: "+columna);

    } */

    public void escribirErrores(Error lista){
            ventana.areaError.setText(ventana.areaError.getText()+lista.toString()+"\n");
        
    }

    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            Error e = new Error((String) s.value, "Sintactico", "Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, s.right, s.left);
            listaErrores.add(e);
            escribirErrores(e);
            setAccion("ERROR","Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, "");
        }
:}

//Coidgo para las acciones gramaticales

action code
{:
    
    Tabla tabla = new Tabla();
    Tupla tupla;
    String texto;

:}

//Declaraciones 
terminal  COMA,LINEA,ERROR,TEXTO;

// declaracion no terminales
non terminal INICIO,E,F;

//presedencia de menor a mayor
//precedence left NOMBRE, PALABRA;


start with INICIO;

//Reglas Semanticas

INICIO ::= {:tupla = new Tupla(); texto=""; :} F;

F::= TEXTO:a {: tupla.agregarContenido((String)a);:} E
     |TEXTO:a {: tupla.agregarContenido((String)a);:}
     |COMA {:tupla.agregarContenido("");:} F
     |error:e F {:parser.syntax_error((Symbol)e);:} 
     |error:e {:parser.syntax_error((Symbol)e);:};

E ::= COMA TEXTO:a {: tupla.agregarContenido((String)a);:} 
      |COMA TEXTO:a {: tupla.agregarContenido((String)a);:} E
      |LINEA {:
      tabla.agregarTupla(tupla);
      parser.setTabla(tabla);
:} INICIO
      |LINEA  {:
      tabla.agregarTupla(tupla);
      parser.setTabla(tabla);
:}
      |COMA {:tupla.agregarContenido("");:} E;
