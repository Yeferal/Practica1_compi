//codigo usuario
package analizador;
import arbol.Busqueda;
import arbol.Nodo;
import archivos.Archivo;
import archivos.Eliminar;
import archivos.Insercion;
import archivos.Actualizar;
import archivos.TipoFiltro;
import archivos.Filtrar;
import archivos.SeleccionColumna;
import archivos.Tabla;
import inicio.VentanaInicio;
import java.io.StringReader;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;

//Codigo para el parser, variables, metodos
parser code
{:
    TreeNode nodoFin;
    ArrayList<Tabla> listaTablas;
    ArrayList<Error> listaErrores = new ArrayList<>();
    VentanaInicio ventana;
    public void setVentana(VentanaInicio ventana){
        this.ventana=ventana;
    }
    public VentanaInicio getVentana(){
        return ventana;
    }

    public void setLista(ArrayList<Tabla> listaTablas){
        System.out.println("Tmanio lisata: "+listaTablas.size());
        this.listaTablas = listaTablas;
    }
    public ArrayList<Tabla> getLista(){
        return listaTablas;
    }
    
    public void setArbol(TreeNode nodoFIN){
        this.nodoFin=nodoFIN;   
    }
    public TreeNode getArbol(){
        return nodoFin;
    }

    private Symbol s;
    public void syntaError(Symbol s){
        this.s = s;
    }
public void escribirErrores(Error lista){
            ventana.areaError.setText(ventana.areaError.getText()+lista.toString()+"\n");
        
    }

    public Symbol getS(Symbol s){
        return this.s = s;
    }
    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void syntax_error(Symbol s){
            if(s!=null){
                Error e = new Error((String) s.value, "Sintactico", "Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, s.right, s.left);
                listaErrores.add(e);
                escribirErrores(e);
                setAccion("ERROR","Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, "");
            }
        }


:}

//Coidgo para las acciones gramaticales

action code
{:
    ArrayList<DefaultMutableTreeNode> listaNodos;
    ArrayList<String> listaColumnasB = new ArrayList<>();
    ArrayList<String> listaColumnasI = new ArrayList<>();
    ArrayList<String> seleccionColumnas = new ArrayList<>();
    TreeNode nodoBuscado;
    Busqueda busqueda = new Busqueda();
    Archivo archivo = new Archivo();
    ArrayList<Tabla> listaTablas = new ArrayList<>();
    Eliminar eliminar = new Eliminar();
    Insercion insercion = new Insercion();
    Actualizar actualizar = new Actualizar();
    SeleccionColumna seleccionColumna = new SeleccionColumna();
    Tabla tablaTemp;
    Filtrar fil = new Filtrar();
    TipoFiltro tipoFil = null;
    int tipoFilNumero;

    public void verNombre(String path){
        String te = path;
        String signo = Pattern.quote(".");
        String [] nombres = te.split(signo);
        DefaultMutableTreeNode nodoP = (DefaultMutableTreeNode) parser.getArbol();
        Nodo nodoOb =(Nodo) nodoP.getUserObject();
        if(nodoOb.getNombre().equals(nombres[0])){
            buscar(nombres);
        }else{
            System.out.println("No se parece");
        }
        
    }
    public void buscar(String [] paths){
        TreeNode nod =(TreeNode) parser.getArbol();
        for(int i =1;i<paths.length;i++){
            busqueda.insertarNodo(nod,paths[i]);
            nod = busqueda.getNodoPadre();
        }
        parser.setArbol(nod);
        if(parser.getArbol()!=null){
            System.out.println("Si encontro"+nod.toString());
        }else{
            System.out.println("No encontro");
        }
    }

    private void analizarCsv(){
        DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
        Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
        AnalizadorLexico3 lexico = new AnalizadorLexico3(new StringReader(archivo.leerCSV(nodoS.getPath())));
        AnalizadorSintactico3 sintactico = new AnalizadorSintactico3(lexico);
        sintactico.setVentana(parser.getVentana());
        try {
            sintactico.parse();
            listaTablas.add(sintactico.getTabla());
            //System.out.println("Tamanio final: "+parser.getTabla().size());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private Tabla FiltrarAnalizarCsv(){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    AnalizadorLexico3 lexico = new AnalizadorLexico3(new StringReader(archivo.leerCSV(nodoS.getPath())));
                    AnalizadorSintactico3 sintactico = new AnalizadorSintactico3(lexico);
                    sintactico.setVentana(parser.getVentana());
                    try {
                        sintactico.parse();
                        fil = new Filtrar();
                        tablaTemp = fil.filtrarColumnas(tipoFil,sintactico.getTabla(),nodoS.getPath());
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
        return null;
    }
:}

//Declaraciones 
terminal TEXTO, COMA,SELECCIONAR,FILTRAR,INSERTAR,ACTUALIZAR,ASIGNAR,ELIMINAR,VALORES,EN,AND,OR,PATH_ARCHIVO,ERROR;
terminal PUNTO_COMA,PUNTO,IGUAL,COMILLAS,ASTERISCO,PARENTECIS_A,PARENTECIS_C,MENOR,MAYOR,MENOR_IGUAL,MAYOR_IGUAL,DIFERENTE;



// declaracion no terminales
non terminal INICIO,TIPO_SELECCIONAR,TIPO_INSERTAR,TIPO_ACTUALIZAR,TIPO_ELIMINAR,TIPO_FILTROS,FILTRO_AND,FILTRO_OR,OPERADORES,ASIGNAR_COLUMNA,LISTA_VALORES_INSERTAR,LISTA_COLUMNAS_INSERTAR, FINALIZA,LISTA_COLUMNAS_SELECT;

//presedencia de menor a mayor
//precedence left NOMBRE, PALABRA;


start with INICIO;

//Reglas Semanticas

INICIO::= SELECCIONAR TIPO_SELECCIONAR
         |INSERTAR EN PATH_ARCHIVO:a {:verNombre((String)a);:} TIPO_INSERTAR
         |ACTUALIZAR EN PATH_ARCHIVO:a {:verNombre((String)a);:} ASIGNAR ASIGNAR_COLUMNA TIPO_ACTUALIZAR
         |ELIMINAR EN TIPO_ELIMINAR
         |error:e INICIO {:parser.syntax_error((Symbol)e);:} 
         |error:e PUNTO_COMA FINALIZA {:parser.syntax_error((Symbol)e);:} ;

TIPO_SELECCIONAR::= ASTERISCO EN PATH_ARCHIVO:a {:
    
        verNombre((String)a);

:} FILTRAR TIPO_FILTROS PUNTO_COMA {:listaTablas.add(tablaTemp); parser.setLista(listaTablas);:} FINALIZA
                    
                    |ASTERISCO EN PATH_ARCHIVO:a {:
    
                verNombre((String)a);
                if(parser.getArbol()!=null){
                    analizarCsv();
                    parser.setLista(listaTablas);
                }else{
                    System.out.println("No existe el archivo");
                }

:} 
PUNTO_COMA{:
                
:} FINALIZA
                    |LISTA_COLUMNAS_SELECT EN PATH_ARCHIVO:a {:verNombre((String)a);:} FILTRAR TIPO_FILTROS PUNTO_COMA {:listaTablas.add(tablaTemp); parser.setLista(listaTablas);:} FINALIZA
                    |LISTA_COLUMNAS_SELECT EN PATH_ARCHIVO:a {:verNombre((String)a);:} PUNTO_COMA {:

                    if(parser.getArbol()!=null){
                        DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                        Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                        seleccionColumna.listarTabla(nodoS.getPath(),seleccionColumnas);
                        
                        listaTablas.add(seleccionColumna.getTablaTemp());
                        parser.setLista(listaTablas);
                        seleccionColumnas.clear();
                    }else{
                        System.out.println("No existe el archivo");
                    }

:} FINALIZA;


LISTA_COLUMNAS_SELECT::= TEXTO:b COMA {:seleccionColumnas.add((String)b); System.out.println("Informacion2: "+b);:} LISTA_COLUMNAS_SELECT
                        |TEXTO:c {:seleccionColumnas.add((String)c); System.out.println("Informacion1: "+c);:} ;

TIPO_FILTROS::= TEXTO:c OPERADORES TEXTO:t {:
                tipoFil= new TipoFiltro(tipoFilNumero,(String)t,(String)c);
                if(tipoFil.isNumeric()){
                    FiltrarAnalizarCsv();
                }  
:} AND FILTRO_AND
                |TEXTO OPERADORES TEXTO OR FILTRO_OR
                |TEXTO:c OPERADORES TEXTO:t {:
                tipoFil= new TipoFiltro(tipoFilNumero,(String)t,(String)c);
                
                if(tipoFil.isNumeric()){
                    FiltrarAnalizarCsv();
                    System.out.println("Entro en adn filtro");
                }  
:}
                |TEXTO:c OPERADORES COMILLAS TEXTO:t COMILLAS {:
                tipoFil= new TipoFiltro(tipoFilNumero,(String)t,(String)c);
                System.out.println("Entro en comillas texto");
                    FiltrarAnalizarCsv();
:} AND FILTRO_AND
                |TEXTO OPERADORES COMILLAS TEXTO COMILLAS OR FILTRO_OR
                |TEXTO:c OPERADORES COMILLAS TEXTO:t COMILLAS {:
                tipoFil= new TipoFiltro(tipoFilNumero,(String)t,(String)c);
                System.out.println("Entro en comillas texto");
                    FiltrarAnalizarCsv();
:};

FILTRO_AND::= TEXTO:c OPERADORES TEXTO:t {:
                tipoFil= new TipoFiltro(tipoFilNumero,(String)t,(String)c);
                if(tipoFil.isNumeric()){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    try {
                        fil = new Filtrar();
                        tablaTemp = fil.filtrarColumnas(tipoFil,tablaTemp,nodoS.getPath());
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }  
:} AND FILTRO_AND

             |TEXTO:c OPERADORES TEXTO:t {:
                tipoFil= new TipoFiltro(tipoFilNumero,(String)t,(String)c);
                if(tipoFil.isNumeric()){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    try {
                        fil = new Filtrar();
                        tablaTemp = fil.filtrarColumnas(tipoFil,tablaTemp,nodoS.getPath());
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }  
:}
             |TEXTO:c OPERADORES COMILLAS TEXTO:t COMILLAS {:
                tipoFil= new TipoFiltro(tipoFilNumero,(String)t,(String)c);
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    try {
                        fil = new Filtrar();
                        tablaTemp = fil.filtrarColumnas(tipoFil,tablaTemp,nodoS.getPath());
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }  
:} AND FILTRO_AND
             |TEXTO:c OPERADORES COMILLAS TEXTO:t COMILLAS {:
                tipoFil= new TipoFiltro(tipoFilNumero,(String)t,(String)c);
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    try {
                        fil = new Filtrar();
                        tablaTemp = fil.filtrarColumnas(tipoFil,tablaTemp,nodoS.getPath());
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }  
:};

FILTRO_OR::=  TEXTO OPERADORES TEXTO AND FILTRO_OR
             |TEXTO OPERADORES TEXTO
             |TEXTO OPERADORES COMILLAS TEXTO COMILLAS AND FILTRO_OR
             |TEXTO OPERADORES COMILLAS TEXTO COMILLAS;

TIPO_INSERTAR::= PARENTECIS_A LISTA_COLUMNAS_INSERTAR PARENTECIS_C VALORES PARENTECIS_A LISTA_VALORES_INSERTAR PARENTECIS_C PUNTO_COMA {:
    
                if(parser.getArbol()!=null){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    insercion.insertarLine(nodoS.getPath(),listaColumnasB,listaColumnasI);
                    analizarCsv();
                    parser.setLista(listaTablas);
                    listaColumnasB.clear();
                    listaColumnasI.clear();
                }else{
                    System.out.println("No existe el archivo");
                }

:} FINALIZA
                |VALORES PARENTECIS_A LISTA_VALORES_INSERTAR PARENTECIS_C PUNTO_COMA {:

                if(parser.getArbol()!=null){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    insercion.setListaColumnasT(listaColumnasI);
                    insercion.setLinea(nodoS.getPath());
                    analizarCsv();
                    parser.setLista(listaTablas);
                    listaColumnasB.clear();
                    listaColumnasI.clear();
                }else{
                    System.out.println("No existe el archivo");
                }
:} FINALIZA;

LISTA_COLUMNAS_INSERTAR::= TEXTO:a {:listaColumnasB.add((String)a);:}
                          |TEXTO:a {:listaColumnasB.add((String)a);:} COMA LISTA_COLUMNAS_INSERTAR;

LISTA_VALORES_INSERTAR::=  TEXTO:a {:listaColumnasI.add((String)a);:}
                          |TEXTO:a {:listaColumnasI.add((String)a);:} COMA LISTA_VALORES_INSERTAR;

TIPO_ACTUALIZAR::= PUNTO_COMA {:
                if(parser.getArbol()!=null){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    actualizar.insertarLine(nodoS.getPath(),listaColumnasB,listaColumnasI);
                    analizarCsv();
                    parser.setLista(listaTablas);
                    listaColumnasB.clear();
                    listaColumnasI.clear();
                }else{
                    System.out.println("No existe el archivo");
                }

:} FINALIZA
                   |FILTRAR TIPO_FILTROS PUNTO_COMA PUNTO_COMA FINALIZA;

ASIGNAR_COLUMNA::=  TEXTO:a IGUAL COMILLAS TEXTO:b COMILLAS {:listaColumnasB.add((String)a); listaColumnasI.add((String)b);:} COMA ASIGNAR_COLUMNA
                    |TEXTO:a IGUAL COMILLAS TEXTO:b COMILLAS {:listaColumnasB.add((String)a); listaColumnasI.add((String)b);:}
                    |TEXTO:a IGUAL TEXTO:b COMA {:listaColumnasB.add((String)a); listaColumnasI.add((String)b);:} ASIGNAR_COLUMNA
                    |TEXTO:a IGUAL TEXTO:b {:listaColumnasB.add((String)a); listaColumnasI.add((String)b);:};

TIPO_ELIMINAR::= PATH_ARCHIVO:a {:

            verNombre((String)a);
            

:}
PUNTO_COMA {:
            if(parser.getArbol()!=null){
                    DefaultMutableTreeNode nodoSelecionado = (DefaultMutableTreeNode) parser.getArbol();
                    Nodo nodoS =(Nodo) nodoSelecionado.getUserObject();
                    eliminar.leerCSV(nodoS.getPath());
                    analizarCsv();
                    parser.setLista(listaTablas);
                }else{
                    System.out.println("No existe el archivo");
                }
:} FINALIZA 
                |PATH_ARCHIVO FILTRAR TIPO_FILTROS PUNTO_COMA FINALIZA;

OPERADORES::= IGUAL {:tipoFilNumero=1;:}
             |MENOR {:tipoFilNumero=3;:}
             |MAYOR {:tipoFilNumero=2;:}
             |MENOR_IGUAL {:tipoFilNumero=5;:}
             |MAYOR_IGUAL {:tipoFilNumero=4;:}
             |DIFERENTE {:tipoFilNumero=6;:};


FINALIZA::= INICIO
            |;
