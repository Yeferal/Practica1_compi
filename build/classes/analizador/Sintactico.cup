//codigo usuario
package analizador;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import inicio.VentanaInicio;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import arbol.Nodo;
import java.util.ArrayList;
import javax.swing.tree.MutableTreeNode;

//Codigo para el parser, variables, metodos
parser code
{:

    DefaultMutableTreeNode root;

    VentanaInicio ventana;
    public void setVentana(VentanaInicio ventana){
        this.ventana=ventana;
    }
    public DefaultMutableTreeNode getArbol(){
        return this.root;
    }

    public void setArbol(DefaultMutableTreeNode root){    
    this.root = root;
    }
    
    public void escribirErrores(Error lista){
            ventana.areaError.setText(ventana.areaError.getText()+lista.toString()+"\n");
        
    }
    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            if(s!=null){
                Error e = new Error((String) s.value, "Sintactico", "Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, s.right, s.left);
            
                escribirErrores(e);
                setAccion("ERROR","Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, "");
            }
    }

:}

//Coidgo para las acciones gramaticales

action code
{:
    DefaultMutableTreeNode root;
    ArrayList<DefaultMutableTreeNode> listaNodos;
    public DefaultMutableTreeNode getArbol(){
        return this.root;
    }

    

    
:}

//Declaraciones 
terminal PROYECTO, NOMBRE,ARCHIVO,CARPETA,UBICACION, MENOR,MAYOR,COMILLAS,DIAGONAL,IGUAL,NUMERO,CARACTERES,PALABRA,RUTA,CSV,PUNTO,CARPETA_CIERRE,PROYECTO_CIERRE;

// declaracion no terminales
non terminal INICIO, TIPO_ENTRADA,TIPO_ARCHIVO,TIPO_CARPETA,TIPO_CERRAR,PATHS,TIPO_PROYECTO,SEGUIDO;

//presedencia de menor a mayor
//precedence left NOMBRE, PALABRA;


start with INICIO;

//Reglas Semanticas

INICIO::= PROYECTO TIPO_PROYECTO
          |error:e INICIO {:parser.syntax_error((Symbol)e);:} 
          |error:e {:parser.syntax_error((Symbol)e);:}
          |error:e SEGUIDO {:parser.syntax_error((Symbol)e);:};

SEGUIDO::= TIPO_CERRAR
           |TIPO_ENTRADA;

TIPO_ENTRADA::= ARCHIVO TIPO_ARCHIVO
               |CARPETA TIPO_CARPETA
               |DIAGONAL TIPO_CERRAR;

TIPO_PROYECTO::= NOMBRE IGUAL COMILLAS PALABRA:a {: System.out.println("palabra proyecto: "+a);:} COMILLAS MAYOR 
{:
    Nodo raiz = new Nodo("",(String) a,"PROYECTO");
    root = new DefaultMutableTreeNode(raiz);
    listaNodos = new ArrayList<>();
    listaNodos.add(root);
    System.out.println("Tamanio "+listaNodos.size());
:}
SEGUIDO;

TIPO_ARCHIVO::= NOMBRE IGUAL COMILLAS PALABRA:a {: System.out.println("palabra archivo: "+a); :} COMILLAS UBICACION IGUAL COMILLAS RUTA:b CSV:v {:System.out.println("ruta DE ARCHIVO: "+b+v); :} COMILLAS DIAGONAL MAYOR 
{:
    if(listaNodos!=null){
        System.out.println("Tamanio "+listaNodos.size());
    Nodo nodo = new Nodo((String) b+v,(String) a,"ARCHIVO");
    DefaultMutableTreeNode nodoArchivo = listaNodos.get(listaNodos.size()-1);
    DefaultMutableTreeNode nodoArchivoTemp= new DefaultMutableTreeNode();
    nodoArchivoTemp.setUserObject(nodo);
    listaNodos.remove(listaNodos.size()-1);
    nodoArchivo.add(nodoArchivoTemp);
    listaNodos.add(nodoArchivo);
    //root.add(nodoArchivoTemp);
    }
    
:}
SEGUIDO;

TIPO_CARPETA::= NOMBRE IGUAL COMILLAS PALABRA:a {: System.out.println("palabra carpeta: "+a); :} COMILLAS MAYOR 
{:
    if(listaNodos!=null){
    System.out.println("Tamanio "+listaNodos.size());
    Nodo nodo = new Nodo("",(String) a,"CARPETA");
    //DefaultMutableTreeNode nodoCarpeta = listaNodos.get(listaNodos.size()-1);
    DefaultMutableTreeNode nodoCarpeta = new DefaultMutableTreeNode((String) a);
    //listaNodos.remove(listaNodos.size()-1);
    nodoCarpeta.setUserObject(nodo);
    listaNodos.add(nodoCarpeta);
    }
    
:}
SEGUIDO;

TIPO_CERRAR::= PROYECTO_CIERRE
{:   
    if(listaNodos!=null){
    System.out.println("Tamanio antes final "+listaNodos.size());
    DefaultMutableTreeNode arbolFinal = listaNodos.get(0);
    listaNodos.remove(listaNodos.size()-1);
    root = arbolFinal;
    System.out.println("Tamanio final "+listaNodos.size());
    parser.setArbol(root);
    RESULT = root; 
    }
    

:}
              |CARPETA_CIERRE
{:
    if(listaNodos!=null){
        System.out.println("Tamanio1 "+listaNodos.size());
    DefaultMutableTreeNode nodoUltimo = listaNodos.get(listaNodos.size()-1);
    listaNodos.remove(listaNodos.size()-1);
    System.out.println("Tamanio2 "+listaNodos.size());
    DefaultMutableTreeNode nodoPenultimo = listaNodos.get(listaNodos.size()-1);
    listaNodos.remove(listaNodos.size()-1);
    System.out.println("Tamanio3 "+listaNodos.size());
    nodoPenultimo.add(nodoUltimo);
    listaNodos.add(nodoPenultimo);
    }
    

:}
SEGUIDO;
