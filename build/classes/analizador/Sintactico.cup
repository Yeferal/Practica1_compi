//codigo usuario
package analizador;
import java_cup.runtime.Symbol;
import java.util.LinkedList;

//Codigo para el parser, variables, metodos
parser code
{:
    /*public static LinkedList<Error> tablaErrorLexico = new LinkedList<Error>();
    
    public void syntaxError(Symbol s){
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    
    System.out.println("====== Error Sinstactico =====");
    System.out.println("Lexema: "+lexema);
    System.out.println("Fila: "+fila);
    System.out.println("Columna: "+columna);

    } */

    private Symbol s;
    public void syntaError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }


:}

//Coidgo para las acciones gramaticales

action code
{:
:}

//Declaraciones 
terminal PROYECTO, NOMBRE,ARCHIVO,CARPETA,UBICACION, MENOR,MAYOR,COMILLAS,DIAGONAL,IGUAL,NUMERO,CARACTERES,PALABRA,RUTA;

// declaracion no terminales
non terminal INICIO, TIPO_ENTRADA,TIPO_ARCHIVO,TIPO_CARPETA,TIPO_CERRAR,PATHS;

//presedencia de menor a mayor
//precedence left NOMBRE, PALABRA;


start with INICIO;

//Reglas Semanticas

INICIO::= MENOR TIPO_ENTRADA;

TIPO_ENTRADA::= PROYECTO NOMBRE IGUAL COMILLAS PALABRA:a {: System.out.println("palabra proyecto: "+a); :} COMILLAS MAYOR
               |TIPO_ARCHIVO
               |TIPO_CARPETA
               |TIPO_CERRAR;

TIPO_ARCHIVO::= ARCHIVO NOMBRE IGUAL COMILLAS PALABRA:a {: System.out.println("palabra archivo: "+a); :} COMILLAS UBICACION IGUAL COMILLAS PATHS:b {: System.out.println("ruta: "+b); :} COMILLAS DIAGONAL MAYOR;

TIPO_CARPETA::= CARPETA NOMBRE IGUAL COMILLAS PALABRA:a {: System.out.println("palabra carpeta: "+a); :} COMILLAS UBICACION IGUAL COMILLAS PATHS:b {: System.out.println("ruta: "+b); :} COMILLAS MAYOR;

TIPO_CERRAR::= DIAGONAL PROYECTO MAYOR
              |DIAGONAL CARPETA MAYOR;

PATHS::= PALABRA:rutaPath {:  System.out.println("ruta Encontrada: "+rutaPath); RESULT = rutaPath; :}
        |RUTA;
               
               